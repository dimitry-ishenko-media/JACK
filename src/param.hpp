////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#ifndef JACK_PARAM_HPP
#define JACK_PARAM_HPP

////////////////////////////////////////////////////////////////////////////////
#include <map>
#include <string>
#include <variant>

struct jackctl_parameter;
struct _JSList;
using jack_list = _JSList;

////////////////////////////////////////////////////////////////////////////////
namespace jack
{

////////////////////////////////////////////////////////////////////////////////
using value = std::variant<
    int,
    unsigned,
    char,
    std::string,
    bool
>;

////////////////////////////////////////////////////////////////////////////////
class param
{
public:
    ////////////////////
    explicit param(jackctl_parameter*);

    void value(const jack::value&);
    jack::value value() const;

    template<typename T>
    auto get() const { return std::get<T>(value()); }

private:
    ////////////////////
    jackctl_parameter* param_;
};

////////////////////////////////////////////////////////////////////////////////
using params = std::map<std::string, param>;

params extract_from(const jack_list*);

param& find(params&, const std::string& name);
const param& find(const params&, const std::string& name);

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif
